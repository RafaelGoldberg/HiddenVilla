@page "/room-amenity/create"
@page "/room-amenity/edit/{Id:int}"
@using Models
@using Business.Repository.IRepository
@using HiddenVilla_Server.Service.IService
@inject IRoomAmenityRepository RoomAmenityRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 mt-3">@Title Room Amenity</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="RoomAmenityModel" OnValidSubmit="HandleAmenityUpsert">

                    <DataAnnotationsValidator />
                    @*  <ValidationSummary/>   *@

                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="RoomAmenityModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>RoomAmenityModel.Name"></ValidationMessage>
                    </div>

                    <div class="form-group" style="height:150px;">
                        <label>Description</label>
                        @*<InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control"></InputTextArea>*@
                        <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please amenity details">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>

                            </EditorContent>
                        </BlazoredTextEditor>

                    </div>


                    <div class="form-group" style="padding-top:150px!important;">
                        <label>Timing</label>
                        <InputText @bind-Value="RoomAmenityModel.Timing" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Icon Style</label>
                        <InputText @bind-Value="RoomAmenityModel.IconStyle" class="form-control"></InputText>
                    </div>


                    <div class="form-group">
                        <button class="btn btn-primary">@Title Amenity</button>
                        <NavLink href="amenity-list" class="btn btn-secondary">Back to List</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private RoomAmenityDTO RoomAmenityModel { get; set; } = new RoomAmenityDTO();
    private string Title { get; set; } = "Create";
    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //updateing
            Title = "Update";
            RoomAmenityModel = await RoomAmenityRepository.GetRoomAmenity(Id.Value);
        }
        else
        {
            //create
            RoomAmenityModel = new RoomAmenityDTO();
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(RoomAmenityModel.Description))
                {
                    await this.QuillHtml.LoadHTMLContent(RoomAmenityModel.Description);
                }
                loading = false;
            }
            catch (Exception)
            {

                await Task.Delay(10);
                loading = true;
            }
        }
    }



    private async Task HandleAmenityUpsert()
    {
        try
        {

            if (RoomAmenityModel.Id != 0 && Title == "Update")
            {
                RoomAmenityModel.Description = await QuillHtml.GetHTML();
                var updateAmenityResults = await RoomAmenityRepository.UpdateRoomAmenity(RoomAmenityModel.Id, RoomAmenityModel);
              
                await JsRuntime.ToastrSuccess("Room Updated Successfully");
            }
            else
            {
                //Create
                RoomAmenityModel.Description = await QuillHtml.GetHTML();
                var CreatedAmenityResults = await RoomAmenityRepository.CreateRoomAmenity(RoomAmenityModel);
               
                await JsRuntime.ToastrSuccess("Room Created Successfully");

            }
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
            throw;
        }
        NavigationManager.NavigateTo("room-amenity");

    }
   

 

}

